from telegram import bot, ReplyKeyboardRemove, ReplyKeyboardMarkup, PhotoSize, ParseMode, InlineKeyboardMarkup, \
    InlineKeyboardButton
from telegram.ext import Updater, CallbackContext, Filters, MessageHandler, ConversationHandler, CommandHandler, \
    CallbackQueryHandler
from settings_bot_currency import TG_Token
from settings_bot_currency import id_name, mdb
import os
from PIL import Image
import parcer2
from parcer2 import URL, get_html, get_content, banks_count, get_distance
import requests
import pandas as pd
import json
import matplotlib.pyplot as plt
import pymongo
from emoji import emojize

MONGODB_LINK = "mongodb+srv://shoomaher:7598621zhora@telegrambot.fls8z.mongodb.net/telegrambot?retryWrites=true&w=majority"
MONGODB = "telegramcurrency"

button_currency = "–í–∞–ª—é—Ç—ã"
button_help = "/help"
button_end = "/end"
button_menu = "/menu"
spisok_currency = []
letter_code = []  # —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
units = []  # –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä
rate = []  # –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
value = 0  # –ø–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –µ–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ --->–≤ —Ñ—É–Ω–∫—Ü–∏–µ)
button_location = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"
button_exchange = "–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã"

ind = -1  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ë–î –ø–æ –≤–∞–ª—é—Ç–∞–º


def dontknow(bot, update):  # –ï—Å–ª–∏ –Ω–µ–ø—Ä–∏–≤–∞–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞,—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    bot.message.reply_text(text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É')


"""–°—Ç–∞—Ä—Ç"""


def message_handler(bot, update):  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
    my_keyboard = ReplyKeyboardMarkup([[button_exchange], [button_currency], [button_end]])
    name = bot.message.chat.first_name
    bot.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç %s,—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üíµüí∂ –∏ –∏—Ö –¥–∏–Ω–∞–º–∏–∫—Éüìà?\n–ö–æ–Ω–µ—á–Ω–æ –¥–∞, —Ç–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!" % name,
        reply_markup=my_keyboard)
    return "spisok comand"


"""–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""


def spisok_comand(bot,
                  update):  # –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    my_keyboard = ReplyKeyboardMarkup([[button_exchange], [button_currency], [button_end]])
    if bot.message.text == button_help:
        bot.message.reply_text(
            text="–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üíµüí∂ –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É –∏ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–µ –¥–∏–Ω–∞–º–∏–∫—Éüìà\n–ö–æ–º–∞–Ω–¥–∞: '–í–∞–ª—é—Ç—ã' –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –≤ –º–µ–Ω—é –ø–æ –≤–∞–ª—é—Ç–∞–º\n–ö–æ–º–∞–Ω–¥–∞: '/end' –∑–∞–≤–µ—Ä—à–∏—Ç –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º  ")
        return "spisok comand"
    if bot.message.text == button_end:
        bot.message.reply_text(
            text="–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É '/start'!",
            reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if bot.message.text == button_currency:
        receive = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
        data = json.loads(receive.text)
        text = "üíµ<b>%s</b>-<i>%s</i>\nüí∂<b>%s</b>-<i>%s</i>" % (
        data["Valute"]["USD"]["Name"], data["Valute"]["USD"]["Value"], data["Valute"]["EUR"]["Name"],
        data["Valute"]["EUR"]["Value"])
        currency_keyboard = ReplyKeyboardMarkup(
            [["–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å–µ–≥–æ–¥–Ω—è"], ["–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã"], [button_menu]])
        bot.message.reply_text(text=text, parse_mode=ParseMode.HTML)
        bot.message.reply_text(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –¥–∏–Ω–∞–º–∏–∫–∏ –≤–∞–ª—é—Ç—ã\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—É",
                               reply_markup=currency_keyboard)
        return "currency menu"
    if bot.message.text == button_menu:
        bot.message.reply_text(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=my_keyboard)
        return "spisok comand"
    # if bot.message.text == button_location:
    #     bot.message.reply_text(text="–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É,–∑–∞—Ç–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é",
    #                            reply_markup=ReplyKeyboardRemove())
    #     return "get location"
    if bot.message.text == "–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã":
        my_keyboard = ReplyKeyboardMarkup([["–ë–ª–∏–∂–∞–π—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏"], [button_menu]])
        bot.message.reply_text(text=get_html(params="text"), reply_markup=my_keyboard, parse_mode=ParseMode.HTML)
        bot.message.reply_text(text="–ü–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ '<b>–ë–ª–∏–∂–∞–π—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏</b>' –≤—ã —É–≤–∏–¥–∏—Ç–µ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ ",
                               reply_markup=my_keyboard, parse_mode=ParseMode.HTML)
        return "exchange"


"""–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–∑–≤–∏–ª–∫–∞ –ø–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç"""


def currency_spisok_command(bot, update):  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ (–≤–∞–ª—é—Ç–∞)
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä–∞–∏—Ñ–∫–∞"""
    chat_id = bot.message.chat_id
    myfile = "graph_%s.png" % chat_id
    ## If file exists, delete it ##
    if os.path.isfile(myfile):
        os.remove(myfile)
    else:  ## Show an error ##
        print("Error: %s file not found" % myfile)
    global value
    spisok_currency.clear()
    letter_code.clear()
    units.clear()
    rate.clear()
    receive = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
    data = json.loads(receive.text)
    spisok_currency.append([data["Valute"]["USD"]["Name"]])
    letter_code.append([data["Valute"]["USD"]["CharCode"]])
    spisok_currency.append([data["Valute"]["EUR"]["Name"]])
    letter_code.append([data["Valute"]["EUR"]["CharCode"]])
    for valute in data["Valute"]:
        if data["Valute"]["%s" % valute]["Name"] != "–î–æ–ª–ª–∞—Ä –°–®–ê" and data["Valute"]["%s" % valute]["Name"] != "–ï–≤—Ä–æ":
            spisok_currency.append([data["Valute"]["%s" % valute]["Name"]])
            letter_code.append([data["Valute"]["%s" % valute]["CharCode"]])
    if bot.message.text == "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å–µ–≥–æ–¥–Ω—è":
        my_keyboard = ReplyKeyboardMarkup(spisok_currency)
        bot.message.reply_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                               reply_markup=my_keyboard)
        return "currency statistics"
    if bot.message.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã":
        my_keyboard = ReplyKeyboardMarkup(spisok_currency)
        bot.message.reply_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–π –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏!",
                               reply_markup=my_keyboard)
        return "date input"
    if bot.message.text == button_menu:
        my_keyboard = ReplyKeyboardMarkup([["–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã"],[button_currency], [button_help, button_end]])
        bot.message.reply_text(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=my_keyboard)
        return "spisok comand"


"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""


def currency_statistics(bot, update):
    global ind, value
    value = bot.message.text
    receive = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
    data = json.loads(receive.text)
    for valute in data["Valute"]:
        if value == data["Valute"]["%s" % valute]["Name"]:
            ind = valute
            continue
    bot.message.reply_text(
        text="–í–∞–ª—é—Ç–∞: <b>%s</b>\n–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>%s</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>%s</b>\n–ö—É—Ä—Å: <b>%s</b> <i>—Ä—É–±–ª–µ–π</i>" % (
            data["Valute"]["%s" % ind]["Name"], data["Valute"]["%s" % ind]["CharCode"],
            data["Valute"]["%s" % ind]["Nominal"],
            data["Valute"]["%s" % ind]["Value"]), parse_mode=ParseMode.HTML)
    my_keyboard = ReplyKeyboardMarkup([["–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã"], [button_currency], [button_help, button_end]])
    bot.message.reply_text(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=my_keyboard)
    return "spisok comand"


# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
def date_input(bot, update):
    global value
    value = bot.message.text
    bot.message.reply_text(
        text="–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω –¥–∞—Ç –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ:'<b>2020-10-25 2020-11-5</b>'\n'<i>–ì–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ –ì–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ</i>'\n–ë–µ–∑ –∫–æ–≤—ã—á–µ–∫!!!",
        reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    return "currency certain statistics"


# –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
def currency_certain_statistics(bot, update):
    chat_id = bot.message.chat_id  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ id
    spisok = []
    date = []
    global ind, value
    for i in range(len(spisok_currency)):  # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ë–î
        if spisok_currency[i] == [value]:
            ind = i
            continue
    code = str(letter_code[ind]).replace("['", "")  # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    code = code.replace("']", "")  # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    currency_start_date, currency_end_date = map(str, bot.message.text.split(" "))
    try:
        currency_start_date = pd.to_datetime(currency_start_date)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞—Ç—É
        currency_end_date = pd.to_datetime(currency_end_date)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞—Ç—É
    except ValueError:
        bot.message.reply_text(text="–í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ –¥–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–∞\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã")
    daterange = pd.date_range(currency_start_date, currency_end_date)  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ –¥–∞—Ç–∞–º
    for single_date in daterange:
        receive = requests.get("https://www.cbr-xml-daily.ru/archive/%s/daily_json.js" % (
            single_date.strftime("%Y/%m/%d")))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ,–≥–¥–µ —Å–Ω–∞—á–∞–ª–∞ –≥–æ–¥,–º–µ—Å—è—Ü,—á–∏—Å–ª–æ
        data = json.loads(receive.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Json —Ñ–∞–π–ª
        try:  # –£—Å–ª–æ–≤–∏–µ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
            data["error"]
        except KeyError:  # –ï—Å–ª–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –Ω–∞ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
            spisok.append(data["Valute"]["%s" % code]["Value"])  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
            date.append(single_date.strftime("%Y-%m-%d"))  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
    print(date)
    print(spisok)
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–∏—Ç–æ–Ω–µ """
    df = pd.DataFrame({"date": date, "value": spisok})  # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ pandas —Å –ø–æ–º–æ—â—å—é dataframe
    df["date"] = pd.to_datetime(df["date"])  # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –¥–∞—Ç–∞–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã
    plt.plot(df["date"], df["value"], lw=1, ls='-', marker='o', markersize=5)  # —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–µ–π
    plt.title("–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã: %s" % value)
    plt.ylabel("–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã")
    plt.grid(True)
    plt.gcf().autofmt_xdate()  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–µ–∑–∂–∞–ª —à—Ä–∏—Ñ—Ç
    plt.savefig("graph_%s" % chat_id)  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    graph = open("graph_%s.png" % chat_id, "rb")  # –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    update.bot.send_photo(chat_id=bot.message.chat_id, photo=graph)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    plt.clf()
    """–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
    # for i,item in enumerate(date):
    #     date[i]+=" –∫—É—Ä—Å: %s —Ä—É–±–ª—è"%spisok[i]
    # bot.message.reply_text(text="\n".join(date))
    my_keyboard = ReplyKeyboardMarkup([["–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã"], [button_currency], [button_menu, button_end]])
    bot.message.reply_text(text="–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É", reply_markup=my_keyboard)

    return "spisok comand"


"""–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã"""


def exchange(bot, update):
    my_keyboard = ReplyKeyboardMarkup([["–ö—É—Ä—Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤"], ["–ë–ª–∏–∂–∞–π—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏"], [button_menu]])
    if bot.message.text == "–ö—É—Ä—Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤":
        bot.message.reply_text(text=get_html(params="text"), reply_markup=my_keyboard, parse_mode=ParseMode.HTML)
        bot.message.reply_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!")
        return "exchange"
    if bot.message.text == "–ë–ª–∏–∂–∞–π—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏":
        bot.message.reply_text(
            text="–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>'—Å–∫—Ä–µ–ø–∫—É'</b>,–∑–∞—Ç–µ–º <b>'–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'</b>",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML)
        return "get location"
    if bot.message.text=="/menu":
        my_keyboard = ReplyKeyboardMarkup([["–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã"], [button_currency], [button_help, button_end]])
        bot.message.reply_text(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=my_keyboard)
        return "spisok comand"



"""–ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""


def get_location(bot, update):
    location = bot.message.location
    latitude = location["latitude"]
    longitude = location["longitude"]
    print(latitude, longitude)
    bot.message.reply_text(text="–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –æ–±–º–µ–Ω–Ω–∏–∫–∏ %s" % bot.message.chat.first_name)
    bot.message.reply_text(text=get_distance(get_html("distance"), "distance", latitude, longitude),
                           parse_mode=ParseMode.HTML,reply_markup=inline_sort())
    return "sort"


"""–∫–Ω–æ–ø–∫–∏ —Å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–æ–¥–∞–∂–µ–π inline"""


def inline_sort():
    keyboard = [[InlineKeyboardButton("–ø–æ–∫—É–ø–∫–∞", callback_data="–ø–æ–∫—É–ø–∫–∞"),
                InlineKeyboardButton("–ø—Ä–æ–¥–∞–∂–∞", callback_data="–ø—Ä–æ–¥–∞–∂–∞")]]
    return InlineKeyboardMarkup(keyboard)

def inline_sort_callback(bot,update):
    query=bot.callback_query
    data=query.data
    if data=="–ø–æ–∫—É–ø–∫–∞":
        keyboard = [[InlineKeyboardButton("–ø—Ä–æ–¥–∞–∂–∞", callback_data="–ø—Ä–æ–¥–∞–∂–∞")]]
        query.edit_message_text(text="sortiruy daun)))",reply_markup=InlineKeyboardMarkup(keyboard))
        return "sort"
    if data=="–ø—Ä–æ–¥–∞–∂–∞":
        keyboard = [[InlineKeyboardButton("–ø–æ–∫—É–ø–∫–∞", callback_data="–ø–æ–∫—É–ø–∫–∞")]]
        query.edit_message_text(text="nu ti clown)))", reply_markup=InlineKeyboardMarkup(keyboard))
        return "sort"


def main():  # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞(–¢–æ–∫–µ–Ω,–¥–∏–∞–ª–æ–≥)
    print("–ë–æ—Ç —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∑–∞–ø—É—â–µ–Ω")
    updater = Updater(token=TG_Token, use_context=True)
    start_handler = updater.dispatcher.add_handler(
        ConversationHandler(entry_points=[CommandHandler("start", message_handler)],
                            states={
                                "spisok comand": [
                                    MessageHandler(Filters.regex("/help|/end|–í–∞–ª—é—Ç—ã|/menu|–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã"),
                                                   spisok_comand)],
                                "currency menu": [MessageHandler(
                                    Filters.regex("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å–µ–≥–æ–¥–Ω—è|–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã|/menu"),
                                    currency_spisok_command)],
                                "currency statistics": [MessageHandler(Filters.text, currency_statistics)],
                                "date input": [MessageHandler(Filters.text, date_input)],
                                "currency certain statistics": [
                                    MessageHandler(Filters.text, currency_certain_statistics)],
                                "get location": [MessageHandler(Filters.location, get_location)],
                                "exchange": [MessageHandler(Filters.regex("–ö—É—Ä—Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤|–ë–ª–∏–∂–∞–π—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏|/menu"),exchange)],
                                 "sort":[CallbackQueryHandler(inline_sort_callback,"–ø–æ–∫—É–ø–∫–∞|–ø—Ä–æ–¥–∞–∂–∞")]
                            },
                            fallbacks=[MessageHandler(Filters.text | Filters.video | Filters.document | Filters.photo,
                                                      dontknow)]
                            )

    )
    # inline_keyboard_handler=CallbackQueryHandler(callback=inline_sort_callback,pass_chat_data=True)
    # updater.dispatcher.add_handler(inline_keyboard_handler)
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
