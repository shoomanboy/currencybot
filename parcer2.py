import requests
import json
from bs4 import BeautifulSoup
from fuzzywuzzy import fuzz
from length import length,length_top5
from itertools import groupby
import googlemaps
from operator import itemgetter
URL = "https://cash.rbc.ru/cash/json/cash_rates/?city=1&currency=3&deal=buy&amount=100&_="  # –î–æ–ª–ª–∞—Ä
# # URL = "https://cash.rbc.ru/cash/json/cash_rates/?city=1&currency=2&deal=buy&amount=100&_="  # –ï–≤—Ä–æ
"""–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É"""
BANKS = 0
spisok = ["–°–±–µ—Ä–±–∞–Ω–∫", "–ê–ö–ë –§–û–†–ê-–ë–ê–ù–ö", "–ó–∞—É–±–µ—Ä –ë–∞–Ω–∫", "–ö–ë –ï–≤—Ä–æ–∞–∑–∏–∞—Ç—Å–∫–∏–π –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ë–∞–Ω–∫", "–ê–ö–ë –¢—Ä–∞–Ω—Å—Å—Ç—Ä–æ–π–±–∞–Ω–∫",
          "–ë–ê–ù–ö –ö–†–ï–ú–õ–ï–í–°–ö–ò–ô", "–ë–∞–Ω–∫ –ë–ö–§", "–ö–ë –°–ø—É—Ç–Ω–∏–∫", "–ê–ö–ë –õ–∞–Ω—Ç–∞-–ë–∞–Ω–∫", "–ê–ö–ë –°–õ–ê–í–ò–Ø", "–ê–ö–ë –ú–µ—Ç–∞–ª–ª–∏–Ω–≤–µ—Å—Ç–±–∞–Ω–∫",
          "–ë–ê–ù–ö –ê–ì–û–†–ê", "–ë–ê–ù–ö –ú–û–°–ö–í–ê-–°–ò–¢–ò", "–ë–∞–Ω–∫ –¢–∞–≤—Ä–∏—á–µ—Å–∫–∏–π", "–ë–∞–Ω–∫ –§–ò–ù–ê–ú", "–ë–∞–Ω–∫ –§–ö –û—Ç–∫—Ä—ã—Ç–∏–µ",
          "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫ –î–û", "–ö–ë –°–æ–ª–∏–¥–∞—Ä–Ω–æ—Å—Ç—å", "–ú–¢–ò –ë–∞–Ω–∫", "–ù–° –ë–∞–Ω–∫"]  # —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤
phones=["88005555550","88001009889","88007754454","88005555603","88005053773",
        "84992418814","84955140810","84951421720","84959570000","84959692415","88002509797",
        "84957887248","84959818503","88007755712","88002004400","88004444400",
        "84959137474","88007009220","84957398800","88005554324"]  # —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –±–∞–Ω–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ
links=["https://www.sberbank.ru/ru/person/additional/operations","https://www.forabank.ru/offices/filter/c-moskva/t-otdeleniya_i_kassy/","https://www.sauberbank.com/msk/services/currencyrates/","https://eab.ru/","https://www.transstroybank.ru/chastnym-klientam/konvertor-valyut/",
       "https://kremlinbank.ru/","https://www.cfb.ru/about/currency/","http://www.banksputnik.ru/kursy-valyut/","https://www.lanta.ru/private/?moscow","http://www.slaviabank.ru/","https://metallinvestbank.ru/private/foreign-exchange-transactions/",
       "http://kbagora.ru/","http://www.mcbank.ru/","https://www.tavrich.ru/cur/","https://finambank.ru/person/currency","https://www.open.ru/exchange-person",
       "https://www.gazprombank.ru/personal/courses/","https://solid.ru/retail/kursy-valyut/mos/","https://www.mti-bank.ru/","https://nsbank-exchange.ru/"]
banks_inf = []

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞–∫—Å –∏ –º–∏–Ω –ø—Ä–æ–¥–∞–∂–∏ ,–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª–∏–∂ –≤—ã–≥–æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏


def get_html(url,params):
    url = url
    headers = {
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.77 YaBrowser/20.11.0.817 Yowser/2.5 Safari/537.36",
        "accept": "application/json, text/javascript, */*; q=0.01"
    }
    req = requests.get(url, headers)
    # print(req.text)
    params = params
    return get_content(req,params)


"""–°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω—É–∂–Ω–æ–π –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª–ª–µ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è """


def get_content(req,params):
    banks = []
    k = 0
    exist = 1
    content = json.loads(req.text)
    metro = []
    """–î–µ–ª–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≥–¥–µ —É–∂–µ –±—É–¥—É—Ç –Ω—É–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
    for i in content["banks"]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ"""
        try:
            content["banks"][k]["metro"][0]
        except TypeError:
            exist = None
            metro.append("–Ω–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ")
        if exist is not None:
            for j in range(len(content["banks"][k]["metro"])):
                metro.append(content["banks"][k]["metro"][j][0])
        # print(metro)
        banks.append({  # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
            "bank": content["banks"][k]["name"],
            "buy": content["banks"][k]["rate"]["sell"],
            "sell": content["banks"][k]["rate"]["buy"],
            "metro": (", ".join(metro)),
            "latitude": content["banks"][k]["coordinates"][0],
            "longitude": content["banks"][k]["coordinates"][1],
        })
        # print(metro)
        metro.clear()
        exist = 1
        k += 1
    # print(banks)
    return banks_count(banks,params)



"""—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥—è—â–∞—è —É—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –¥–ª—è –ø–æ—Ä–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""


def banks_count(banks,params):
    word=0
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–Ω–∫–æ–≤"""
    spisok_rate=[]
    for j in range(len(spisok)):
        for i in range(len(banks)):
            if fuzz.partial_token_sort_ratio(spisok[j], banks[i]["bank"]) >= 90:  # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                word="<b>%s</b> / <b>%s</b> <a href='%s'>%s</a>\n–¢–µ–ª–µ—Ñ–æ–Ω: %s" % ( banks[i]["sell"], banks[i]["buy"],links[j],spisok[j],phones[j])
                if word not in spisok_rate:
                    spisok_rate.append("<b>%s</b> / <b>%s</b> <a href='%s'>%s</a>\n–¢–µ–ª–µ—Ñ–æ–Ω: %s" % ( banks[i]["sell"], banks[i]["buy"],links[j],spisok[j],phones[j]))
                    break
    # print("\n".join(spisok_rate)) # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –∏ –∏—Ö –∫—É—Ä—Å–æ–≤
    text="\n".join(delete_copy(spisok_rate))
    if params=="text":
        # print(text)
        return text
    elif params=="distance":
        return banks
# print(get_html("text"))

"""–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –±–∞–Ω–∫–æ–≤ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""


def get_distance(banks,params,latitude,longitude):
    distances = []
    names = []
    rates = []
    spisok_rate=[]
    spisok_rate.clear()
    coordinates=[]
    coordinates.clear()
    spisok_text=[]
    spisok_text.clear()
    spisok_data=[]
    spisok_data.clear()
    spisok_buy = []
    spisok_buy.clear()
    spisok_buy_sorted=[]
    spisok_buy_sorted.clear()
    spisok_sell = []
    spisok_sell.clear()
    spisok_sell_sorted=[]
    spisok_sell_sorted.clear()
    maxsell = 0
    lenmax=[]
    imax=-1
    minbuy = 999999999
    imin=-1
    lenmin=[]
    maxsellnear = 0
    minbuynear = 0
    clon=0
    """–ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∫–∏"""
    for i in range(len(banks)):
        if float(banks[i]["sell"])>float(maxsell):
            maxsell=banks[i]["sell"]
        if float(banks[i]["buy"])<float(minbuy):
            minbuy=banks[i]["buy"]

    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    for i in range(len(banks)):
        if banks[i]["sell"]==maxsell:
            spisok_buy.append([banks[i]["latitude"], banks[i]["longitude"], length(latitude,longitude,banks[i]["latitude"], banks[i]["longitude"]), i,banks[i]["sell"],banks[i]["buy"],banks[i]["bank"]])
        if banks[i]["buy"]==minbuy:
            spisok_sell.append([banks[i]["latitude"], banks[i]["longitude"], length(latitude,longitude, banks[i]["latitude"], banks[i]["longitude"]), i,banks[i]["sell"],banks[i]["buy"],banks[i]["bank"]])
    spisok_buy.sort(key=itemgetter(2))
    spisok_sell.sort(key=itemgetter(2))
    for i in range(0,2):
        try:
            spisok_buy[i]
        except IndexError:
            break
        else:
            j=spisok_buy[i][3]
            lenmax.append(length_top5(latitude,longitude,banks[j]["latitude"],banks[j]["longitude"]))
    imax=min(lenmax)
    spisok_buy[0][2]=imax
    for i in range(0,2):
        try:
            spisok_sell[i]
        except IndexError:
            break
        else:
            j=spisok_sell[i][3]
            lenmin.append(length_top5(latitude,longitude,banks[j]["latitude"],banks[j]["longitude"]))
    imin=min(lenmin)
    spisok_sell[0][2]=imin
    try:
        spisok_buy_sorted[i]
    except IndexError:
        spisok_buy_sorted.append(spisok_buy[0])
    maxsell=spisok_buy_sorted[0]
    try:
        spisok_sell_sorted[i]
    except IndexError:
        spisok_sell_sorted.append(spisok_sell[0])
    minbuy=spisok_sell_sorted[0]
    # "<i>%s</i>- <b>%s</b> / <b>%s</b> (<i>%s</i>–∫–º)" % (spisok_data[i][0], spisok_data[i][1], spisok_data[i][2], spisok_data[i][3]

    # maxsell = "üè¶<b>%s</b> / <b>%s</b> <a href='%s'>%s</a> (<i>%s</i>–∫–º)"
    # –ø–æ–∫—É–ø–∫–∞ / –ø—Ä–æ–¥–∞–∂–∞ –±–∞–Ω–∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    maxsell="üè¶<b>%s</b> / <b>%s</b> <a href='%s'>%s</a> (<i>%s</i>–∫–º)" % (maxsell[4],maxsell[5],link(latitude,longitude,maxsell[0],maxsell[1]),maxsell[6],maxsell[2])
    minbuy="üè¶<b>%s</b> / <b>%s</b> <a href='%s'>%s</a> (<i>%s</i>–∫–º)" % (minbuy[4],minbuy[5],link(latitude,longitude,minbuy[0],minbuy[1]),minbuy[6],minbuy[2])
    # print(maxsell)
    # print(minbuy)
    """–ü–æ–¥—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏, –∑–∞—Ç–µ–º –ø–æ–¥—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ —Ç–æ–ø5 —á–µ—Ä–µ–∑ googlemapsapi"""
    distances.clear()
    for i in range(len(banks)):
        distances.append(length(latitude,longitude,banks[i]["latitude"], banks[i]["longitude"]))
    distances.sort(reverse=False)
    # print(distances[:7])
    for i in range(0,7):
        try:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            distances[i]
        except IndexError:
            break
        else:
            """—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –ø–æ—Ç–æ–º—É —á—Ç–æ —è –±–æ–º–∂ –∏ –Ω–µ –º–æ–≥—É —Å–æ—Ä–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏–∑ –≥—É–≥–ª–∞"""
            """–≤ —ç—Ç–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö —Å–µ–º–∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏"""
            for j in range(len(banks)):
                # print(length(latitude,longitude,banks[j]["latitude"],banks[i]["longitude"]))
                if distances[i] == length(latitude,longitude,banks[j]["latitude"],banks[j]["longitude"]):
                    names.append(banks[j]["bank"])
                    coordinates.append([banks[j]["latitude"],banks[j]["longitude"]])
                    rates.append([banks[j]["sell"],banks[j]["buy"]])
                    spisok_rate.append([banks[j]["bank"],banks[j]["sell"],banks[j]["buy"]])
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–∂–µ –∏–∑ —Ç–æ–ø5 –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –Ω–æ —Å Googlemaps"""
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    names = delete_copy(names)
    # print(names)
    coordinates = delete_copy(coordinates)
    # print(coordinates)
    spisok_rate=delete_copy(spisok_rate)
    # print(spisok_rate)
    for i in range(0, 5):
        try:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            names[i]
        except IndexError:
            break
        else:  # —Å–ø–∏—Å–æ–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ,–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª—é–±–æ–≥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            # –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑ —Å—Ç—Ä–æ—á–µ–∫ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            spisok_data.append([names[i], spisok_rate[i][1],spisok_rate[i][2], length_top5(latitude, longitude, coordinates[i][0], coordinates[i][1]),latitude, longitude, coordinates[i][0], coordinates[i][1]])
    """–ë–ª–∏–∂–∞–π—à–∏–µ –±–∞–Ω–∫–∏"""
    if params=="distance":
        spisok_data.sort(key=itemgetter(3))
        for i in range(len(spisok_data)):
            spisok_text.append("üè¶<b>%s</b> / <b>%s</b> <a href='%s'>%s</a> (<i>%s</i>–∫–º)" % (spisok_data[i][1],spisok_data[i][2],link(spisok_data[i][4],spisok_data[i][5],spisok_data[i][6],spisok_data[i][7]),spisok_data[i][0], spisok_data[i][3]))
        text="\n".join(spisok_text)
        # print(text)
        return text
    """–í—ã–≥–æ–¥–Ω–∞—è –ø–æ–∫—É–ø–∫–∞(–±–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ —Å–∞–º–æ–º—É –≤—ã—Å–æ–∫—É –∫—É—Ä—Å—É)"""
    if params=="distance_buy":
        spisok_data.sort(key=itemgetter(1))
        for i in range(len(spisok_data)):
            spisok_text.append("üè¶<b>%s</b> / <b>%s</b> <a href='%s'>%s</a> (<i>%s</i>–∫–º)" % (spisok_data[i][1],spisok_data[i][2],link(spisok_data[i][4],spisok_data[i][5],spisok_data[i][6],spisok_data[i][7]),spisok_data[i][0], spisok_data[i][3]))
        # print("\n".join(spisok_text))
        if maxsell not in spisok_text:
            spisok_text.insert(0,maxsell)
        text = "\n".join(spisok_text)
        return text
    """–í—ã–≥–æ–¥–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞(–±–∞–Ω–∫ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ —Å–∞–º–æ–º—É –Ω–∏–∑–∫–æ–º—É –∫—É—Ä—Å—É)"""
    if params=="distance_sell":
        spisok_data.sort(key=itemgetter(2))
        for i in range(len(spisok_data)):
            spisok_text.append("üè¶<b>%s</b> / <b>%s</b> <a href='%s'>%s</a> (<i>%s</i>–∫–º)" % (spisok_data[i][1],spisok_data[i][2],link(spisok_data[i][4],spisok_data[i][5],spisok_data[i][6],spisok_data[i][7]),spisok_data[i][0], spisok_data[i][3]))
        if minbuy not in spisok_text:
            spisok_text.insert(0,minbuy)
        text = "\n".join(spisok_text)
        return text
    # print(names)
    # print(rates)


def link(latitude, longitude,latitude1,longitude1):
    link='https://yandex.ru/maps/213/moscow/?ll=%2C&mode=routes&rtext={0}%2C{1}~{2}%2C{3}&rtt=auto&ruri=ymapsbm1%3A%2F'.format(latitude, longitude,latitude1,longitude1)
    # print(link)
    return link


"""–§—É–Ω–∫—Ü–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ(—É–¥–∞–ª—è–µ—Ç –¥–∞–∂–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏)"""


def delete_copy(array):
    array1=[el for el, _ in groupby(array)]
    return array1

